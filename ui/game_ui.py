from rich.console import Console
from rich.layout import Layout
from rich.panel import Panel
from rich.align import Align
import time
import os
from rich import box
from game.building import Building

from game.stats_tools import (
    export_stats_to_csv,
    export_stats_to_excel,
    plot_stats_chart
)

class GameUI:
    """
    GameUI ‚Äì klasa odpowiedzialna za interfejs tekstowy gry Tower Defense w terminalu (Rich).
    Zapewnia:
        -rysowanie mapy i panelu bocznego z aktualnym stanem gry,
        -animacje zdarze≈Ñ (np. start fali, cios krytyczny, stun, pauza),
        -eksport statystyk do pliku CSV/Excel oraz wykres (matplotlib),
        -obs≈Çugƒô wej≈õcia u≈ºytkownika podczas rozgrywki,
        -dynamicznƒÖ prezentacjƒô powiadomie≈Ñ i efekt√≥w statusowych wrog√≥w.
    """

    def __init__(self, game):
        """
        Inicjuje obiekt GameUI ‚Äì buduje strukturƒô layoutu, ≈Çaduje konsolƒô Rich i
        integruje logikƒô budowania wie≈º.
        """
        self.game = game
        self.console = Console()
        # Struktura layoutu: nag≈Ç√≥wek, g≈Ç√≥wny panel (mapa + sidebar)
        self.layout = Layout()
        self.layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main", ratio=1),
        )
        self.layout['main'].split_row(
            Layout(name="map", ratio=2),
            Layout(name="sidebar", ratio=1),
        )
        self.building = Building(self)

    def refresh(self):
        """
        Od≈õwie≈ºa uk≈Çad interfejsu (np. po ataku, budowie, zmianie statystyk).
        """
        self._update_layout()

    def effect_flash(self, msg, color="red", emoji="üí•", repeat=2, speed=0.07):
        """
        Efekt kr√≥tkiego migniƒôcia tekstu na ≈õrodku ekranu ‚Äì np. przy ciosie krytycznym.
        """
        for _ in range(repeat):
            self.console.print(f"[bold {color}]{emoji} {msg} {emoji}[/]", justify="center")
            time.sleep(speed)
            self.console.clear()
            self._update_layout()
        self.console.print(f"[bold {color}]{emoji} {msg} {emoji}[/]", justify="center")
        time.sleep(0.4)

    def simple_animated_event(self, msg, emoji="üí•", color="bold red", repeat=2, sleep_time=0.2, hold_time=1.0):
        """
        Uniwersalna animacja tekstowa dla wa≈ºnych zdarze≈Ñ (start/koniec fali, stun, boss).
        """
        for _ in range(repeat):
            self.console.clear()
            self.console.print(f"[{color}]{emoji} {msg} {emoji}[/{color}]", justify="center")
            time.sleep(sleep_time)
            self.console.clear()
            self._update_layout()
            time.sleep(sleep_time)
        self.console.print(f"[{color}]{emoji} {msg} {emoji}[/{color}]", justify="center")
        time.sleep(hold_time)



    def show_pause(self):
        """
        Wy≈õwietla panel pauzy gry. Czyszczenie ekranu i informacja o zatrzymaniu.
        """
        os.system('cls' if os.name == 'nt' else 'clear')
        self.console.clear()
        panel = Panel(
            Align.center("[bold yellow]‚è∏ PAUZA ‚è∏\n\n[dim]Naci≈õnij Enter, aby wr√≥ciƒá do gry...[/]"),
            box=box.DOUBLE,
            width=40
        )
        self.console.print(panel, justify="center")
        input()

    def living_enemies(self):
        """Generator zwracajƒÖcy tylko ≈ºywych wrog√≥w."""
        for enemy in self.game.enemies:
            if enemy.alive:
                yield enemy

    def _update_layout(self):
        """
        Buduje layout interfejsu ‚Äì nag≈Ç√≥wek, mapa, sidebar.
        Zawiera:
            -wy≈õwietlanie mapy gry,
            -podsumowanie statystyk,
            -pasek HP i efekty statusowe wrog√≥w,
            -powiadomienia,
            -kontrolki sterowania.
        """
        # Header
        header_padding = "\n" * 2
        self.layout['header'].update(
            Panel(
                Align.center(header_padding + "[bold cyan]üõ°Ô∏è  Tower Defense[/]"),
                box=box.ROUNDED,
                height=1
            )
        )

        # Mapa gry
        width = self.game.map.WIDTH
        height = self.game.map.HEIGHT

        lines = []
        lines.append("   " + " ".join(chr(65 + i) for i in range(width)))
        for i in range(height):
            row = f"{i + 1:2} "
            for j in range(width):
                ch = self.game.map.grid[i][j]
                # Zasiƒôg wie≈º i symbol wie≈ºy na planszy
                for t in self.game.towers:
                    if abs(i - t.y) + abs(j - t.x) <= t.range:
                        if (i, j) == (t.y, t.x):
                            ch = t.symbol
                        elif (i, j) in self.game.map.path:
                            ch = '.'
                # Przeciwnicy na planszy
                for e in self.game.enemies:
                    if e.alive and (i, j) == e.position:
                        ch = e.symbol
                row += ch + " "
            lines.append(row)

        map_str = "\n".join(lines)
        map_lines = len(lines)
        sidebar_min = 25
        panel_height = max(map_lines + 6, sidebar_min)

        self.layout['map'].update(
            Panel(
                Align.center(map_str, vertical="middle"),
                title="[bold]Mapa[/]",
                height=panel_height
            )
        )

        # Sidebar: statystyki, HP wrog√≥w, kontrolki, powiadomienia
        stats = (
            f"[bold yellow]üí∞ Z≈Çoto:[/] {self.game.gold}\n"
            f"[bold red]‚ù§Ô∏è ≈ªycia:[/] {self.game.lives}\n"
            f"[bold blue]üåä Fala:[/] {self.game.wave_number}\n"
            f"[bold green]üïê Tempo gry:[/] x{self.game.game_speed}\n"
        )

        bar_len = 10
        hp_lines = [
            f"{enemy.symbol} {enemy.name}: "
            f"[{('‚ñà' * int(enemy.hp / enemy.max_hp * bar_len) + '‚ñë' * (bar_len - int(enemy.hp / enemy.max_hp * bar_len)))}] "
            f"{enemy.hp}/{enemy.max_hp}"
            f"{' [red]üî•[/]' if getattr(enemy, 'burning', 0) > 0 else ''}"
            f"{' [blue]‚ùÑÔ∏è[/]' if getattr(enemy, 'slowed', 0) > 0 else ''}"
            f"{' [yellow]üí´[/]' if getattr(enemy, 'stunned', 0) > 0 else ''}"
            f"{' [magenta]üëª[/]' if getattr(enemy, 'invisible', False) else ''}"
            f"{' [green]ü©π[/]' if getattr(enemy, 'regenerates', False) and enemy.hp < enemy.max_hp else ''}"
            f"{' [cyan]üõ°Ô∏è[/]' if getattr(enemy, 'fire_immune', False) else ''}"
            for enemy in self.living_enemies()
        ]
        hp_text = "\n".join(hp_lines) or "Brak ≈ºywych wrog√≥w"

        controls = (
            "[B] Buduj     [U] Ulepsz\n"
            "[+] Szybciej  [-] Wolniej\n"
            "[S] Zapisz    [A] OsiƒÖgniƒôcia\n"
            "[N] Fala      [M] Muzyka\n"
            "[E] Eksport   [P] Pauza\n"
            "[Q] Wyj≈õcie\n"
        )

        max_notif = 6
        to_show = self.game.notifications[-max_notif:]
        if len(to_show) < max_notif:
            to_show = [""] * (max_notif - len(to_show)) + to_show
        notif_text = "\n".join(f"[dim]{msg}[/]" for msg in to_show)

        sidebar_parts = [
            stats,
            "[bold]-- Przeciwnicy --[/]",
            hp_text,
            "[bold]-- Sterowanie --[/]",
            controls,
            "[bold]-- Powiadomienia --[/]",
            notif_text,
        ]
        sidebar_content = "\n\n".join(sidebar_parts)

        sidebar_panel = Panel(
            Align.center(sidebar_content, vertical="middle"),
            title="[bold]Panel boczny[/]",
            height=panel_height
        )
        self.layout['sidebar'].update(sidebar_panel)

    def run(self):
        """
        G≈Ç√≥wna pƒôtla rozgrywki i obs≈Çugi wej≈õcia u≈ºytkownika:
        umo≈ºliwia budowƒô i ulepszanie wie≈º, start fal, eksport wynik√≥w, pauzƒô,
        sterowanie prƒôdko≈õciƒÖ, zapisywanie gry, wy≈õwietlanie osiƒÖgniƒôƒá i zako≈Ñczenie gry.

        Obs≈Çugiwane klawisze:
            [B] ‚Äì buduj wie≈ºƒô
            [U] ‚Äì ulepsz wie≈ºƒô
            [N] ‚Äì nowa fala
            [S] ‚Äì zapis gry
            [E] ‚Äì eksport statystyk
            [+] / [-] ‚Äì tempo gry
            [M] ‚Äì mute/unmute muzyki
            [A] ‚Äì panel osiƒÖgniƒôƒá
            [P] ‚Äì pauza
            [Q] ‚Äì wyj≈õcie
        """
        if self.game.map is None:
            self.console.print("[red]‚ùå Nie zainicjalizowano mapy. Uruchom najpierw nowƒÖ grƒô lub wczytaj zapis.[/]")
            return

        while self.game.lives > 0:
            os.system('cls' if os.name == 'nt' else 'clear')
            self.console.clear()
            self._update_layout()
            self.console.print(self.layout)

            choice = input("Wybierz opcjƒô: ").strip().lower()

            if choice == 'a':
                self.game.show_achievements()
                input("\n‚è∏ Naci≈õnij Enter, aby wr√≥ciƒá do gry‚Ä¶")
            elif choice == 'b':
                self.game.building.build_tower()
            elif choice == 'u':
                self.game.building.upgrade_tower()
            elif choice == 'n':
                self.game.wave_loop.start_wave(self)
            elif choice == 's':
                self.game.save_game()
                self.game.notifications.append("üíæ Zapisujƒô grƒô.")
                time.sleep(0.5)
            elif choice == 'm':
                self.game.sound.toggle_mute()
            elif choice == '+':
                self.game.game_speed = min(self.game.game_speed + 0.5, 5.0)
                self.game.notifications.append(f"‚è© Przyspieszono tempo: x{self.game.game_speed}")
            elif choice == '-':
                self.game.game_speed = max(self.game.game_speed - 0.5, 0.5)
                self.game.notifications.append(f"‚è™ Spowolniono tempo: x{self.game.game_speed}")
            elif choice == 'e':
                while True:
                    print(
                        "\n[1] Eksportuj do CSV"
                        "\n[2] Eksportuj do Excel (XLSX)"
                        "\n[3] Eksportuj do obu"
                        "\n[4] Wy≈õwietl wykres"
                        "\n[Q] Anuluj"
                    )
                    subchoice = input("Wybierz format eksportu / opcjƒô: ").strip().lower()
                    if subchoice == '1':
                        export_stats_to_csv(self.game.stats, self.game.username)
                        break
                    elif subchoice == '2':
                        export_stats_to_excel(self.game.stats, self.game.username)
                        break
                    elif subchoice == '3':
                        export_stats_to_csv(self.game.stats, self.game.username)
                        export_stats_to_excel(self.game.stats, self.game.username)
                        break
                    elif subchoice == '4':
                        plot_stats_chart(self.game.stats)

                    elif subchoice == 'q':
                        print("‚ùå Anulowano eksport.")
                        break
                    else:
                        print("‚ùå Nieznana opcja.")
                input("‚è∏ Naci≈õnij Enter, aby wr√≥ciƒá do gry‚Ä¶")
            elif choice == 'p':
                self.show_pause()
            elif choice == 'q':
                os.system('cls' if os.name == 'nt' else 'clear')
                self.game.ranking.update_highscores()
                break
            else:
                self.game.notifications.append("‚ùå Nieznana opcja.")
            time.sleep(0.1)

            self.game.ranking.update_highscores()